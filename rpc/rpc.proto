syntax = "proto3";
package rpc;
option go_package = ".;rpc";

// Provides access to network information.
service Registry {
  // Get overall server status.
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  
  // Create a new user and send them an invite code so they can get access to their account.
  rpc CreateInvitedUser(CreateInvitedUserRequest) returns (CreateInvitedUserResponse);

  // Approve a new user invite. This will also start the onboarding process which
  // includes sending an email to the user.
  rpc ApproveInvitedUser(ApproveInvitedUserRequest) returns (ApproveInvitedUserResponse);

  // Retrieve details of users.
  rpc GetUsers(GetUsersRequest) returns (stream GetUsersResponseItem);

  // Update a user's state. A user will be allowed to update only their state. Admins can
  // update any user's state. The user argument should include the id field plus any fields
  // which should be updated.
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);

  // Delete a user and associated resources.
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);

  // Create a new subnet.
  rpc CreateSubnet(CreateSubnetRequest) returns (CreateSubnetResponse);

  // Retrieve details of subnets.
  rpc GetSubnets(GetSubnetsRequest) returns (stream GetSubnetsResponseItem);

  // Update a subnet's metadata but not addresses.
  rpc UpdateSubnetMeta(UpdateSubnetMetaRequest) returns (UpdateSubnetMetaResponse);

  // Assign an address from within a subnet to a user's machine.
  rpc AssignSubnetAddress(AssignSubnetAddressRequest) returns (AssignSubnetAddressResponse);

  // Remove an address from within a subnet from a user's machine.
  rpc RemoveSubnetAddress(RemoveSubnetAddressRequest) returns (RemoveSubnetAddressResponse);

  // Delete a subnet.
  rpc DeleteSubnet(DeleteSubnetRequest) returns (DeleteSubnetResponse);
}

// Request to get server's health.
message HealthCheckRequest {
}

// Get server health response.
message HealthCheckResponse {
  // Indicates if the server is okay overall.
  bool ok = 1;
}

// Request to invite a user.
message CreateInvitedUserRequest {
  // Name of new user.
  string name = 1;

  // Email of new user.
  string email = 2;
}

// Invite user response.
message CreateInvitedUserResponse {
  // Invite code new user will use to authenticate once. This value is only returned in this
  // response so take note of it.
  string invite_code = 1;

  // Created user.
  User user = 2;
}

// Approve invited user request.
message ApproveInvitedUserRequest {
  // ID of user to approve.
  string id = 1;
}

// Approve invited user response.
message ApproveInvitedUserResponse {
}

// Request for user information. Do not specify any options to get a list of all users.
message GetUsersRequest {
  // Filter results to match specified user ID.
  string id = 1;

  // Filter results to match specified name.
  string name = 2;

  // Filter results to match specified email.
  string email = 3;

  // Filter results to match users who own a machine with the specified public key.
  string machine_public_key = 4;
}

// Single item returned by get users in a stream.
message GetUsersResponseItem {
  // Returned user.
  User user = 1;
}

// Request to update a user.
message UpdateUserRequest {
  // ID of user to update.
  string id = 1;

  // New user fields.
  User user = 2;
}

// Response to update user.
message UpdateUserResponse {
  // New user.
  User user = 1;
}

// Request to delete a user.
message DeleteUserRequest {
  // ID of user to delete.
  string id = 1;
}

// Response after deleting a user.
message DeleteUserResponse {
}

// Request to create a subnet.
message CreateSubnetRequest {
  // Name of new subnet.
  string name = 1;

  // Network address of new subnet. See the Subnet.AddressAssignment.Address field for details
  // on the 64 bit size.
  uint64 network_address = 2;

  // Network mask of new subnet.
  uint64 network_mask = 3;
}

// Response after creating a subnet.
message CreateSubnetResponse {
  // Created subnet.
  Subnet subnet = 1;
}

// Request to retrieve information about subnets.
message GetSubnetsRequest {
  // Filter to match subnets with the specified ID.
  string id = 1;

  // Filter to match subnets with the specified name.
  string name = 2;

  // Filter to match subnets with the specified address.
  string address = 3;
}

// Get subnets response item, one of many in a stream.
message GetSubnetsResponseItem {
  // Matched subnet.
  Subnet subnet = 1;
}

// Request to update a subnet's metadata.
message UpdateSubnetMetaRequest {
  // ID of subnet to update.
  string id = 1;

  // New subnet name.
  string name = 2;
}

// Update subnet metadata response.
message UpdateSubnetMetaResponse {
  // Updated subnet.
  Subnet subnet = 1;
}

// Request to assign an address in a subnet to a user's machine.
message AssignSubnetAddressRequest {
  // ID of subnet.
  string id = 1;

  // Address being assigned. See the Subnet.AddressAssignmnet.Address field for information about
  // the 64 bit size.
  uint64 address = 2;

  // ID of user to which machine belongs.
  string user_id = 3;

  // Public key of machine to assign IP.
  string machine_public_key = 4;
}

// Assign subnet address response.
message AssignSubnetAddressResponse {
  // Subnet after assignment.
  Subnet subnet = 1;
}

// Request to remove an address from a subnet from a device.
message RemoveSubnetAddressRequest {
  // ID of subnet.
  string id = 1;

  // Address to remove.
  uint64 address = 2;
}

// Remove subnet address response.
message RemoveSubnetAddressResponse {
  // Subnet after address assignment removal.
  Subnet subnet = 1;
}

// Request to delete a subnet and all associated resources.
message DeleteSubnetRequest {
  // ID of subnet.
  string id = 1;
}

// Delete subnet response.
message DeleteSubnetResponse {
}

// User in network.
message User {
  // Unique identifier.
  string id = 1;

  // Invite to the network.
  message Invite {
    // ID of user who created the invite.
    string creating_user_id = 1;

    // Indicates if the invite has been approved. Admins must approve new user
    // invites to prevent normal users from bringing in new user's who have not
    // been approved yet.
    bool invite_approved = 2;

    // Indicates if the user has accepted the invited. If this is true they will
    // be treated like a full user. If this is false then the user's password_hash
    // is actually the invite code's hash.
    bool joined = 3;
  }
  // Invite which created user.
  Invite invite = 2;

  // Name of user.
  string name = 3;

  // Detailed information about a user's email.
  message Email {
    // Email value.
    string email = 1;

    // True if email has been verified.
    bool verified = 2;
  }
  // User's email.
  Email email = 4;

  // Password hash. When 
  string password_hash = 5;

  // Indicates the special actions a user is able to take.
  message Permissions {
    // Indicates the user can administer any network or user.
    bool admin = 1;

    // Indicates the user is allowed to send traffic meant for the public internet
    // through the server node.
    bool allow_public_traffic = 2;
  }
  // Permissions associated with the user.
  Permissions permissions = 6;

  // Machine's user controls which are part of the network.
  message Machine {
    // Wireguard public key of machine. Used as the device's primary key.
    string public_key = 1;

    // User friendly name for the machine.
    string name = 2;
  }
  // Machines owned by the user.
  repeated Machine machines = 7;
}

// Sub-network within network.
message Subnet {
  // Unique identifier. Not related to the sub-network's address.
  string id = 1;

  // User friendly name for the subnet.
  string name = 2;

  // Address which identifies the subnet when and-ed with the network_mask.
  uint64 network_address = 3;

  // Subnet's mask. See note in AddressAssignment.address about the 64 bit size.
  uint64 network_mask = 4;

  // Network address assignment.
  message AddressAssignment {
    // Address being assigned. Used as the primary key.
    // Currently only IPv4 32 bit addresses are supported. The field is a 64 bit integer
    // for future compatability with IPv6.
    uint64 address = 1;

    // ID of user to which machine belongs.
    string user_id = 2;

    // Public key of machine to assign IP.
    string machine_public_key = 3;
  }
  // Addresses assigned in subnet.
  repeated AddressAssignment address_assignments = 5;
}
